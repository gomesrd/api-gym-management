generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Modality {
  Pilates
  Functional
}

enum TrainingType {
  Plan
  Singular
  Replacement
}

enum Status {
  Reschedule
  Realized
  Foul
}

enum Role {
  Admin
  Employee
  Member
}

enum Occupation {
  Personal_Trainer
  Physiotherapist
}

enum Days {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum Recurrence {
  Monthly
  Quarterly
  Semiannual
  Annual
}

enum Participant {
  Singular
  Pair
}

model User {
  id               String           @id @unique @default(uuid()) @db.Uuid
  name             String           @db.VarChar()
  cpf              String           @unique @db.VarChar()
  role             Role             @default(Member)
  birth_date       String           @db.VarChar()
  email            String           @unique @db.VarChar()
  phone            String           @db.VarChar()
  password         String           @db.Text
  salt             String           @db.Text
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  user_address_id  String           @db.Uuid
  deleted          Boolean?         @default(false) @db.Boolean()
  address          UserAddres       @relation(fields: [user_address_id], references: [id])
  personal_trainer PersonalTrainer?
  member           Member?

  @@map("user")
}

model UserAddres {
  id                   String  @id @unique @default(uuid()) @db.Uuid
  address              String  @db.VarChar()
  address_number       String  @db.VarChar()
  address_complement   String? @db.VarChar()
  address_neighborhood String  @db.VarChar()
  city                 String  @db.VarChar()
  state                String  @db.VarChar()
  country              String? @default("Brazil") @db.VarChar()
  zip_code             String  @db.VarChar()
  user                 User[]

  @@map("user_address")
}

model PersonalTrainer {
  id              String           @id @unique @default(uuid()) @db.Uuid
  user_id         String           @unique @default(uuid()) @db.Uuid
  occupation      Occupation[]     @default([Personal_Trainer])
  training        Training[]
  training_record TrainingRecord[]
  user            User             @relation(fields: [user_id], references: [id])

  @@map("personal_trainer")
}

model Member {
  id              String           @id @unique @default(uuid()) @db.Uuid
  user_id         String           @unique @default(uuid()) @db.Uuid
  user            User             @relation(fields: [user_id], references: [id])
  training        Training[]
  training_record TrainingRecord[]
  MemberPlan      MemberPlan[]

  @@map("member")
}

model Training {
  id                  String           @id @unique @default(uuid()) @db.Uuid
  fixed_day           Days?
  single_date         DateTime? // If it singular or replacement
  start_time          String           @db.VarChar()
  modality            Modality         @default(Pilates)
  type                TrainingType     @default(Plan)
  deleted             Boolean?         @default(false) @db.Boolean()
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt
  member_id           String           @db.Uuid
  personal_trainer_id String           @db.Uuid
  member              Member           @relation(fields: [member_id], references: [user_id])
  personal_trainer    PersonalTrainer  @relation(fields: [personal_trainer_id], references: [user_id])
  training_record     TrainingRecord[]

  @@unique(fields: [start_time, fixed_day, personal_trainer_id], name: "training_unique")
  @@map("training")
}

model TrainingRecord {
  id                  String          @id @unique @default(uuid()) @db.Uuid
  type                TrainingType    @default(Plan)
  status              Status          @default(Realized)
  training_id         String          @db.Uuid
  personal_trainer_id String          @db.Uuid
  member_id           String          @db.Uuid
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  personal_trainer    PersonalTrainer @relation(fields: [personal_trainer_id], references: [user_id])
  member              Member          @relation(fields: [member_id], references: [user_id])
  training            Training        @relation(fields: [training_id], references: [id])

  @@map("training_record")
}

model Plan {
  id          String       @id @unique @default(uuid()) @db.Uuid
  name        String       @db.VarChar()
  modalitie   Modality     @default(Pilates)
  recurrence  Recurrence   @default(Quarterly)
  participant Participant  @default(Singular)
  isActive    Boolean      @default(true)
  price       Float
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  MemberPlan  MemberPlan[]

  @@map("plan")
}

model MemberPlan {
  id         String   @id @default(uuid()) @db.Uuid
  member_id  String   @db.Uuid
  startDate  DateTime @default(now())
  endDate    DateTime
  isActive   Boolean  @default(true)
  price      Float
  plan_id    String   @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  member     Member   @relation(fields: [member_id], references: [user_id])
  plan       Plan     @relation(fields: [plan_id], references: [id])

  @@map("member_plan")
}

// TODO - Criar relatório de treinos (count de treinos realizados, faltas, etc)
// TODO - Criar paginação
// TODO - Criar validação para cpf
// TODO - Criar buscar por nome
// TODO - Criar endpoints Planos
// TODO - Criar DATA E COUNT para trainings e trainings records
