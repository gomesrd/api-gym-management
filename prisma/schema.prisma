generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Modality {
  pilates
  functional
}

enum TrainingType {
  plan
  singular
  replacement
}

enum Status {
  realized
  foul
}

enum Role {
  admin
  employee
  member
}

enum Occupation {
  physical_educator
  physiotherapist
}

enum Days {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

enum Recurrence {
  monthly
  quarterly
  semiannual
  annual
}

enum MemberAmount {
  singular
  pair
}

model Users {
  id               String           @id @unique @default(uuid()) @db.Uuid
  name             String           @db.VarChar()
  cpf              String           @unique @db.VarChar()
  role             Role             @default(member)
  birth_date       String           @db.VarChar()
  email            String           @unique @db.VarChar()
  phone            String           @db.VarChar()
  password         String           @db.Text
  salt             String           @db.Text
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  deleted          Boolean?         @default(false) @db.Boolean()
  personal_trainer PersonalTrainer?
  member           Member?
  users_address    UsersAddress?

  @@map("users")
}

model UsersAddress {
  id                   String  @id @unique @default(uuid()) @db.Uuid
  address              String  @db.VarChar()
  address_number       String  @db.VarChar()
  address_complement   String? @db.VarChar()
  address_neighborhood String  @db.VarChar()
  city                 String  @db.VarChar()
  state                String  @db.VarChar()
  country              String? @default("Brazil") @db.VarChar()
  zip_code             String  @db.VarChar()
  user_address_id      String  @unique @db.Uuid
  user                 Users   @relation(fields: [user_address_id], references: [id])

  @@map("users_address")
}

model PersonalTrainer {
  id              String           @id @unique @default(uuid()) @db.Uuid
  user_id         String           @unique @default(uuid()) @db.Uuid
  occupation      Occupation       @default(physical_educator)
  training        Training[]
  training_record TrainingRecord[]
  user            Users            @relation(fields: [user_id], references: [id])

  @@map("personal_trainer")
}

model Member {
  id                  String                @id @unique @default(uuid()) @db.Uuid
  user_id             String                @unique @db.Uuid
  user                Users                 @relation(fields: [user_id], references: [id])
  training_record     TrainingRecord[]
  MemberPlan          MemberPlan[]
  TrainingReplacement TrainingReplacement[]
  MemberTraining      MemberTraining[]

  @@map("member")
}

model Training {
  id                      String               @id @unique @default(uuid()) @db.Uuid
  regular_training        Days?
  singular_training       String?              @db.VarChar()
  starts_at               String?              @db.VarChar()
  ends_at                 String?              @db.VarChar()
  modality                Modality             @default(pilates)
  type                    TrainingType         @default(plan)
  deleted                 Boolean?             @default(false) @db.Boolean()
  created_at              DateTime             @default(now())
  updated_at              DateTime             @updatedAt
  personal_trainer_id     String               @db.Uuid
  training_replacement_id String?              @unique @db.Uuid
  training_replacement    TrainingReplacement? @relation(fields: [training_replacement_id], references: [id])
  personal_trainer        PersonalTrainer      @relation(fields: [personal_trainer_id], references: [user_id])
  training_record         TrainingRecord[]
  MemberTraining          MemberTraining[]

  @@unique(fields: [starts_at, ends_at, regular_training, personal_trainer_id], name: "training_unique_regular_training")
  @@unique(fields: [starts_at, ends_at, singular_training, personal_trainer_id], name: "training_unique_singular_training")
  @@map("training")
}

model MemberTraining {
  id          String @id @unique @default(uuid()) @db.Uuid
  training_id String @db.Uuid
  member_id   String @db.Uuid

  Training Training @relation(fields: [training_id], references: [id])
  Member   Member   @relation(fields: [member_id], references: [user_id])

  @@map("member_training")
}

model TrainingRecord {
  id                  String          @id @unique @default(uuid()) @db.Uuid
  type                TrainingType    @default(plan)
  status              Status          @default(realized)
  training_id         String          @db.Uuid
  personal_trainer_id String          @db.Uuid
  member_id           String          @db.Uuid
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  personal_trainer    PersonalTrainer @relation(fields: [personal_trainer_id], references: [user_id])
  member              Member          @relation(fields: [member_id], references: [user_id])
  training            Training        @relation(fields: [training_id], references: [id])

  @@map("training_record")
}

model TrainingReplacement {
  id         String     @id @unique @default(uuid()) @db.Uuid
  realized   Boolean?   @default(false) @db.Boolean()
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  member_id  String     @db.Uuid
  member     Member     @relation(fields: [member_id], references: [user_id])
  Training   Training[]

  @@map("training_replacement")
}

model Plan {
  id              String       @id @unique @default(uuid()) @db.Uuid
  name            String       @db.VarChar()
  modalitie       Modality     @default(pilates)
  recurrence      Recurrence   @default(quarterly)
  member_amount   MemberAmount @default(singular)
  training_amount Int
  isActive        Boolean      @default(true)
  price           Float
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  MemberPlan      MemberPlan[]

  @@map("plan")
}

model MemberPlan {
  id         String   @id @default(uuid()) @db.Uuid
  member_id  String   @db.Uuid
  startDate  DateTime @default(now())
  endDate    DateTime
  isActive   Boolean  @default(true)
  price      Float
  plan_id    String   @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  member     Member   @relation(fields: [member_id], references: [user_id])
  plan       Plan     @relation(fields: [plan_id], references: [id])

  @@map("member_plan")
}
